# ------------------------------------------------------------
# Kubernetes Job: Initialize Airflow Metadata DB & Admin User
# ------------------------------------------------------------
apiVersion: batch/v1
kind: Job
metadata:
  name: airflow-init-db  # Name of the Job
  namespace: {{ .Values.namespace }}  # Target namespace from Helm values
spec:
  template:
    spec:
      ttlSecondsAfterFinished: 60  # Clean up job pod 60 seconds after completion
      restartPolicy: OnFailure  # Retry the job if it fails (one retry at a time)
      serviceAccountName: {{ .Values.airflow.serviceAccountName }}  # Use Airflow's service account for RBAC access
      containers:
      - name: airflow-init
        image: "{{ .Values.airflow.image.repository }}:{{ .Values.airflow.image.tag }}"  # Custom Airflow image

        command: ["/bin/bash", "-c"]
        args:
          - |
            # Wait for PostgreSQL to become available
            until pg_isready -h postgres-postgresql.airflow.svc.cluster.local -p 5432; do
              echo "Waiting for Postgres..."; sleep 5;
            done;

            # Initialize Airflow metadata DB (creates tables)
            airflow db init;

            # Create the initial Airflow web UI admin user
            airflow users create \
              --username "$_AIRFLOW_WWW_USER_USERNAME" \
              --password "$_AIRFLOW_WWW_USER_PASSWORD" \
              --firstname "$_AIRFLOW_WWW_USER_FIRSTNAME" \
              --lastname "$_AIRFLOW_WWW_USER_LASTNAME" \
              --role Admin \
              --email "$_AIRFLOW_WWW_USER_EMAIL" || true  # Prevent failure if user already exists

        env:
        # Core Airflow configuration
        - name: AIRFLOW__CORE__EXECUTOR
          value: {{ .Values.airflow.executor }}
        - name: AIRFLOW__KUBERNETES_EXECUTOR__NAMESPACE
          value: {{ .Values.namespace }}
        - name: AIRFLOW__CORE__DAGS_FOLDER
          value: /opt/airflow/dags
        - name: AIRFLOW__LOGGING__BASE_LOG_FOLDER
          value: /opt/airflow/logs

        # Secrets loaded via ExternalSecret into Kubernetes Secret (airflow-db-secret)
        - name: AIRFLOW__CORE__FERNET_KEY
          valueFrom:
            secretKeyRef:
              name: airflow-db-secret
              key: fernetKey
        - name: AIRFLOW__WEBSERVER__SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: airflow-db-secret
              key: secretKey
        - name: AIRFLOW__DATABASE__SQL_ALCHEMY_CONN
          valueFrom:
            secretKeyRef:
              name: airflow-db-secret
              key: sql_alchemy_conn

        # Default Airflow admin user credentials (from Vault via ESO)
        - name: _AIRFLOW_WWW_USER_USERNAME
          valueFrom:
            secretKeyRef:
              name: airflow-db-secret
              key: webuser
        - name: _AIRFLOW_WWW_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: airflow-db-secret
              key: webpassword
        - name: _AIRFLOW_WWW_USER_EMAIL
          valueFrom:
            secretKeyRef:
              name: airflow-db-secret
              key: webuseremail
        - name: _AIRFLOW_WWW_USER_FIRSTNAME
          valueFrom:
            secretKeyRef:
              name: airflow-db-secret
              key: webuserfirstname
        - name: _AIRFLOW_WWW_USER_LASTNAME
          valueFrom:
            secretKeyRef:
              name: airflow-db-secret
              key: webuserlastname
